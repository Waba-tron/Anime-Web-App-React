{"version":3,"sources":["components/nav/nav.jsx","components/animeList/animeList.jsx","components/pages/homePage/homePage.jsx","components/nav/sub-nav.jsx","components/anime/anime-summary/anime-summary.jsx","components/anime/anime-episodes/anime-episodes.jsx","components/anime/anime.jsx","components/pages/error-page/error-page.jsx","components/pages/catogories-page/catogories-page.jsx","App.js","index.js"],"names":["Nav","match","console","log","useState","searchState","setSearch","searchResults","setSearchResults","searchLoading","setSearchLoading","className","to","onChange","e","target","value","onKeyPress","a","fetch","data","json","Anime","fetchAnime","placeholder","class","map","currentAnime","id","attributes","posterImage","src","alt","large","titles","en_us","en","en_jp","AnimeList","titleList","animeData","key","original","HomePage","popularAnime","setPopularAnime","highestRatedAnime","setHighestRatedAnime","animeCatogories","setAnimeCatogories","loading","setLoading","useEffect","adata","aAnime","catogoryData","Catogories","fetchPopularAnime","currentCatogory","title","SubNav","activeClassName","AnimeSummary","summaryData","Genres","averageRating","synopsis","showType","status","ageRating","ageRatingGuide","startDate","episodeLength","episodeCount","ratingRank","popularityRank","substring","currentGenre","AnimeEpisodes","episodeData","posterImg","gotoNextPage","gotoPrevPage","loadingEpisode","currentEpisode","thumbnail","number","onClick","animeCover","setAnimeCover","animeTitle","setAnimeTitle","animePoster","setAnimePoster","AnimeSummaryData","setSummaryData","animeGenres","setAnimeGenres","animeEpisodes","setAnimeEpisodes","params","animeId","currentPageUrl","setCurrentPageUrl","nextPageUrl","setNextPageUrl","prevPageUrl","setPrevPageUrl","episodeLoading","setEpisodeLoading","genreData","TGenres","coverImage","animeEpisodesData","links","next","prev","fetchEpisodes","coverImageStyle","backgroundImage","style","url","exact","path","component","ErrorPage","CatogoriesPage","popularCatogoryAnime","setPopularCatogoryAnime","ratedCatogoryAnime","setratedCatogoryAnime","catogory","popularAnimeData","ratedAnimeData","ratedAnime","fetchCatogoryAnime","App","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1603bce0.chunk.js","sourcesContent":["import React from 'react'\r\nimport './nav.css';\r\nimport { Stretch } from 'styled-loaders-react';\r\nimport {useState} from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {Link} from 'react-router-dom';\r\nexport default function Nav({match}) {\r\n    \r\n    console.log(match)\r\n    const [searchState, setSearch] = useState('');\r\n    const [searchResults, setSearchResults] = useState([]);\r\n    const [searchLoading, setSearchLoading] = useState(true);\r\n  \r\n    const search = (e) =>{\r\n \r\n        const fetchAnime = async () => {\r\n\r\n            setSearchLoading(true);\r\n     \r\n            const data = await fetch(`https://kitsu.io/api/edge/anime?filter[text]=${searchState}`);\r\n\r\n            const Anime = await data.json();\r\n            \r\n            setSearchResults(Anime.data);\r\n                \r\n            setSearchLoading(false);\r\n            \r\n            \r\n        }\r\n\r\n        fetchAnime();\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <nav className=\"navbar\">\r\n                <Link to={'/'} className=\"home-link\">\r\n                AWA\r\n                </Link>\r\n\r\n                <div className=\"search-box\">\r\n                    <input className=\"search-bar\" onChange={e => {setSearch(e.target.value)}} onKeyPress={search}placeholder=\"search...\" />\r\n                    <i class=\"fas fa-search\"></i>\r\n                </div>\r\n         \r\n\r\n               {searchState === '' ? '' :\r\n               \r\n            <div className=\"search-container\">\r\n             \r\n                {searchLoading === true ? <Stretch/> :\r\n            \r\n                searchResults.map(currentAnime => \r\n\r\n                 \r\n                    <NavLink to={`/anime/${currentAnime.id}/summary`} className=\"search-link\" >\r\n                           <div className=\"search-result\">\r\n\r\n                        {\r\n                               \r\n                            currentAnime.attributes.posterImage === null ? <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/No_image_available.svg/1024px-No_image_available.svg.png\" alt=\"\"/>\r\n                            : <img src={currentAnime.attributes.posterImage.large} alt=\"\"/>\r\n                            \r\n                        }\r\n\r\n                       \r\n                        {\r\n                        \r\n                        (() => {\r\n\r\n                            if(currentAnime.attributes.titles.en_us == null){\r\n\r\n                                if(currentAnime.attributes.titles.en == null){\r\n\r\n                                    return <span>{currentAnime.attributes.titles.en_jp}</span>\r\n                                }\r\n                                else{\r\n                                    return <span>{currentAnime.attributes.titles.en}</span>\r\n                        \r\n                                }\r\n                            }\r\n                            else{\r\n                                return <span>{currentAnime.attributes.titles.en_us}</span>\r\n                            }\r\n                         \r\n                        })()\r\n                        }\r\n                         </div>\r\n                        </NavLink>\r\n                  \r\n                    )\r\n                       \r\n                }\r\n            </div>\r\n            }\r\n            </nav>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './animeList.css';\r\nimport {Link} from 'react-router-dom';\r\nexport default function AnimeList({titleList, animeData}) {\r\n    return (\r\n        <div>\r\n     \r\n            <h4>{titleList}</h4>\r\n\r\n        \r\n            <div className=\"data-container\">\r\n      \r\n            {\r\n            animeData.map(currentAnime =>\r\n                    <Link to={`/anime/${currentAnime.id}/summary`}>\r\n                    <div key={animeData.id}>\r\n                        <img className=\"list-img\" src={currentAnime.attributes.posterImage.original}></img>\r\n                    </div>\r\n                    </Link>\r\n                    )\r\n            }\r\n            </div>\r\n                    \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {useState, useEffect} from 'react';\r\nimport AnimeList from '../../animeList/animeList.jsx';\r\nimport { Stretch } from 'styled-loaders-react';\r\nimport {Link} from 'react-router-dom';\r\nimport './homePage.css';\r\n\r\nexport default function HomePage() {\r\n\r\n    const [popularAnime, setPopularAnime] = useState([]);\r\n\r\n    const [highestRatedAnime, setHighestRatedAnime] = useState([]);  \r\n\r\n    const [animeCatogories, setAnimeCatogories] = useState([]);\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(()=>{\r\n        \r\n        const fetchPopularAnime = async () => {\r\n\r\n            setLoading(true);\r\n\r\n            //fetch list for most popular anime\r\n            const data = await fetch('https://kitsu.io/api/edge/anime?sort=-userCount');\r\n\r\n            const Anime = await data.json();\r\n          \r\n            setPopularAnime(Anime.data);\r\n\r\n            //fetch list for higjestest rated anime\r\n            const adata = await fetch('https://kitsu.io/api/edge/anime?sort=-averageRating');\r\n\r\n            const aAnime = await adata.json();\r\n\r\n            console.log(aAnime);\r\n            setHighestRatedAnime(aAnime.data);\r\n\r\n            //fetch list of catogories\r\n\r\n            const catogoryData = await fetch('https://kitsu.io/api/edge/categories?page%5Blimit%5D=40&sort=-total_media_count');\r\n\r\n            const Catogories = await catogoryData.json();\r\n\r\n            setAnimeCatogories(Catogories.data);\r\n\r\n\r\n            setLoading(false);\r\n\r\n        }\r\n\r\n        fetchPopularAnime();\r\n    }, []);\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n            { loading ? <Stretch/>:\r\n            <div className=\"home-container\">\r\n                <div>\r\n                <h1>Explore Anime</h1>\r\n                <AnimeList titleList={\"Most Popular Anime\"} animeData={popularAnime}/>\r\n                <AnimeList titleList={\"Highest Rated Anime\"} animeData={highestRatedAnime}/>\r\n                </div>\r\n\r\n                <div className=\"catogory-container\">\r\n                    <h3>Catogories</h3>\r\n                 \r\n                    {\r\n                        animeCatogories.map(currentCatogory =>\r\n                        <Link className=\"catogory-link\" to={`catogories/${currentCatogory.attributes.title}`}>{currentCatogory.attributes.title}</Link>\r\n                        )\r\n                    }\r\n               \r\n                </div>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {NavLink} from 'react-router-dom';\r\nimport '../../components/nav/sub-nav.css';\r\nexport default function SubNav({id}) {\r\n    return (\r\n        <div>\r\n            <nav className=\"sub-nav\">\r\n                <ul className=\"sub-links\">\r\n                    <NavLink activeClassName=\"current-link\" to={`${id}/summary`} className=\"sub-link link\">Summary</NavLink>\r\n              \r\n                    <NavLink activeClassName=\"current-link\" to={`${id}/episodes`} className=\"sub-link link\">Episodes</NavLink>\r\n                </ul> \r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport '../../anime/anime.css';\r\nimport '../anime-summary/anime-summary.css';\r\nexport default function AnimeSummary({summaryData, title, Genres}) {\r\n\r\n    const {averageRating, synopsis, showType, status, ageRating, ageRatingGuide, startDate, episodeLength, episodeCount, ratingRank, popularityRank} = (summaryData);\r\n  \r\n    return (\r\n        \r\n        <div className=\"anime-summary-container\">\r\n          \r\n     \r\n            <div className=\"anime-summary\">\r\n                \r\n                <div className=\"anime-title\">\r\n                    <h1>{title}</h1>\r\n                    <h3>{startDate.substring(0,4)}</h3>\r\n                </div>\r\n          \r\n                {\r\n                    averageRating >= 75 ?\r\n                    <div className=\"high-rating\">{averageRating}%  Community Approval</div>:\r\n                    <div className=\"med-rating\">{averageRating}%  Community Approval</div>\r\n                }\r\n                \r\n                <p>{synopsis} \r\n                </p>\r\n                <div className=\"genres-container\">\r\n                {\r\n                \r\n                   Genres.data.map(currentGenre =>\r\n                    <div key={currentGenre.id} className=\"genre\">\r\n                        <h2>{currentGenre.attributes.title}</h2>\r\n                    </div>\r\n              \r\n                   )\r\n                      \r\n                }\r\n                </div>   \r\n\r\n                <div className=\"ratings\">\r\n\r\n                    <h3><i class=\"fas fa-heart\"></i>Rank #{ratingRank} (Most Popular Anime)</h3>\r\n                  \r\n                    <h3><i class=\"fas fa-star\"></i>Rank #{popularityRank} (Highest Rated Anime)</h3>\r\n                        \r\n                </div>\r\n            \r\n            </div>\r\n\r\n\r\n                <div className=\"anime-details\">\r\n                <h4>Anime Details</h4>\r\n                <ul>\r\n                    <li>\r\n                    <strong>Title</strong> <span>{title}</span>\r\n                    </li>\r\n                    \r\n                    <li>\r\n                    <strong>Type</strong><span>{showType}</span>\r\n                    </li>\r\n                    <li>\r\n                    <strong>Aired</strong><span>{startDate}</span>\r\n                    </li>\r\n                    <li>\r\n                    <strong>Status</strong> <span>{status}</span>\r\n                    </li>\r\n                    \r\n                    {\r\n                        //If there is no value for number of episodes display nothing\r\n                        episodeCount == null ? ''\r\n                        : <li>\r\n                        <strong>Episodes</strong> <span>{episodeCount} </span>\r\n                        </li>\r\n                    }\r\n\r\n                    <li>\r\n                        <strong>Rating</strong> <span>{ageRating} {ageRatingGuide}</span>\r\n                    </li>\r\n\r\n                    <li>\r\n                    <strong>Length</strong> <span>{episodeLength} minutes</span>\r\n                    </li>\r\n                   \r\n                </ul>\r\n              \r\n                </div>\r\n             \r\n        </div>\r\n            \r\n\r\n        \r\n    )\r\n}\r\n","import React from 'react'\r\nimport './anime-episodes.css';\r\nimport { Stretch } from 'styled-loaders-react';\r\nexport default function AnimeEpisodes({episodeData, posterImg, gotoNextPage, gotoPrevPage, loadingEpisode}) {\r\n\r\n    return (\r\n        <div className=\"episodes-container\">\r\n              <h1>These are the episodes</h1>\r\n\r\n            {console.log(episodeData)}\r\n            { loadingEpisode === true ? <Stretch/> :\r\n            <div className=\"episodes\">\r\n            {\r\n             \r\n                episodeData.data.map(currentEpisode =>\r\n\r\n                    <div key={currentEpisode.id} className=\"episode-card\">\r\n                        \r\n                        {\r\n                            currentEpisode.attributes.thumbnail == null ?  <img src={posterImg} alt=\"\"/>\r\n                            : <img src={currentEpisode.attributes.thumbnail.original} alt=\"\"/>\r\n                         \r\n                        }\r\n          \r\n                        <h4>\r\n                            <span>Episode {currentEpisode.attributes.number}</span>    \r\n                            <span className=\"caption\"> {currentEpisode.attributes.titles.en_us}</span>\r\n                        </h4>\r\n    \r\n                    </div>\r\n              \r\n                )\r\n                \r\n            }\r\n                </div>\r\n}\r\n                <div className=\"buttons-container\">\r\n                    {gotoPrevPage&&<button className=\"pagination-button\" onClick={gotoPrevPage}>Prev</button>}\r\n                    {gotoNextPage&&<button className=\"pagination-button\" onClick={gotoNextPage}>Next</button>}\r\n                </div>\r\n           \r\n                \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {useState, useEffect} from 'react';\r\nimport SubNav from '../nav/sub-nav.jsx';\r\nimport AnimeSummary from './anime-summary/anime-summary.jsx';\r\nimport AnimeEpisodes from './anime-episodes/anime-episodes.jsx';\r\nimport {Route} from 'react-router-dom';\r\nimport { Stretch } from 'styled-loaders-react';\r\n\r\n\r\nimport './anime.css';\r\n\r\nexport default function Anime({match}) {\r\n\r\n    const [animeCover, setAnimeCover] = useState('');\r\n    const [animeTitle, setAnimeTitle] = useState('');\r\n    const [animePoster, setAnimePoster] = useState('');\r\n    const [AnimeSummaryData, setSummaryData] = useState('');\r\n    const [animeGenres, setAnimeGenres] = useState([]);  \r\n\r\n    //Hold Episode Data\r\n    const [animeEpisodes, setAnimeEpisodes] = useState(null);\r\n    const [currentPageUrl, setCurrentPageUrl] = useState(`https://kitsu.io/api/edge/anime/${match.params.animeId}/episodes`)\r\n    const [nextPageUrl, setNextPageUrl] = useState();\r\n    const [prevPageUrl, setPrevPageUrl] = useState();\r\n    const [episodeLoading, setEpisodeLoading] = useState(true);\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(()=>{\r\n        \r\n        const fetchAnime = async () => {\r\n\r\n            //Get Genre Data \r\n\r\n            setLoading(true);\r\n            const genreData = await fetch(`https://kitsu.io/api/edge/anime/${match.params.animeId}/categories`);\r\n\r\n            const TGenres = await genreData.json();\r\n  \r\n            setAnimeGenres(TGenres);\r\n        \r\n              \r\n            //GET Data for summary\r\n            const data = await fetch(`https://kitsu.io/api/edge/anime/${match.params.animeId}`);\r\n\r\n            const Anime = await data.json();\r\n\r\n            setSummaryData(Anime.data.attributes);\r\n          \r\n            const {titles, coverImage, posterImage} = (Anime.data.attributes);\r\n\r\n            if(coverImage == null){\r\n                setAnimeCover(posterImage.large);\r\n            }\r\n            else{\r\n                setAnimeCover(coverImage.original);\r\n         \r\n            }\r\n       \r\n    \r\n            setAnimePoster(posterImage.original);\r\n\r\n         \r\n            if(titles.en_us == null){\r\n\r\n                if(titles.en == null){\r\n\r\n                    setAnimeTitle(titles.en_jp);\r\n                }\r\n                else{\r\n                    setAnimeTitle(titles.en);\r\n                }\r\n            }\r\n             \r\n            else{\r\n                setAnimeTitle(titles.en_us);\r\n            }\r\n\r\n            setCurrentPageUrl(`https://kitsu.io/api/edge/anime/${match.params.animeId}/episodes`)\r\n          \r\n            setLoading(false);\r\n\r\n        }\r\n        fetchAnime();         \r\n      \r\n          \r\n    \r\n    },[ match.params.animeId]);\r\n\r\n\r\n    useEffect(() =>{\r\n\r\n        \r\n        const fetchEpisodes = async () => {\r\n\r\n            setEpisodeLoading(true);\r\n            const episodeData = await fetch(currentPageUrl);\r\n            const animeEpisodesData = await episodeData.json();\r\n         \r\n         \r\n            setNextPageUrl(animeEpisodesData.links.next);\r\n            setPrevPageUrl(animeEpisodesData.links.prev);\r\n            setAnimeEpisodes(animeEpisodesData);\r\n            setEpisodeLoading(false);\r\n\r\n        }\r\n\r\n        fetchEpisodes();\r\n        \r\n\r\n    }, [currentPageUrl])\r\n\r\n    function gotoNextPage(){\r\n        setCurrentPageUrl(nextPageUrl);\r\n    }\r\n\r\n    function gotoPrevPage(){\r\n        setCurrentPageUrl(prevPageUrl);\r\n    }\r\n\r\n    \r\n\r\n    let coverImageStyle ={\r\n        backgroundImage: `url(${animeCover}) , linear-gradient(rgba(0,0,0,0.5),rgba(0,0,0,0.5))`,\r\n    }\r\n\r\n\r\n    return (\r\n        \r\n        <div>\r\n\r\n            { loading ? <Stretch  /> :\r\n            <div>\r\n            <div className=\"cover-img\" style={coverImageStyle}>\r\n                \r\n            </div>\r\n            <SubNav id={match.url}/>\r\n            <div className=\"info-container\">\r\n\r\n                <img className=\"poster-img\" src={animePoster}></img>\r\n\r\n            <Route exact path=\"/anime/:animeId/summary\" component={() => <AnimeSummary title={animeTitle} summaryData={AnimeSummaryData} Genres={animeGenres}/>} />\r\n            <Route exact path=\"/anime/:animeId/episodes\" component={()=> <AnimeEpisodes episodeData={animeEpisodes} gotoNextPage={nextPageUrl?gotoNextPage : null} gotoPrevPage={prevPageUrl ? gotoPrevPage : null} loadingEpisode={episodeLoading} posterImg={animePoster}/>}/>\r\n\r\n            </div>\r\n            </div>\r\n            }\r\n          \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function ErrorPage() {\r\n    return (\r\n        <div>\r\n            <h1>Page dosent exist</h1>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {useState, useEffect} from 'react';\r\nimport './catogories-page.css';\r\nimport { Stretch } from 'styled-loaders-react';\r\nimport AnimeList from '../../animeList/animeList.jsx';\r\n\r\nexport default function CatogoriesPage({match}) {\r\n\r\n    const [popularCatogoryAnime, setPopularCatogoryAnime] = useState([]);\r\n    const [ratedCatogoryAnime, setratedCatogoryAnime] = useState([])\r\n    const [loading, setLoading] = useState(true);\r\n    \r\n    useEffect(()=>{\r\n        \r\n        const fetchCatogoryAnime = async () => {\r\n\r\n            setLoading(true);\r\n\r\n            const popularAnimeData = await fetch(`https://kitsu.io/api/edge/anime?fields%5Banime%5D=slug%2CcanonicalTitle%2Ctitles%2CposterImage%2Csynopsis%2CaverageRating%2CstartDate%2CpopularityRank%2CratingRank%2CyoutubeVideoId&filter%5Bcategories%5D=${match.params.catogory}&page%5Blimit%5D=20&page%5Boffset%5D=0&sort=-userCount`);\r\n\r\n            const popularAnime = await popularAnimeData.json();\r\n\r\n            setPopularCatogoryAnime(popularAnime.data);\r\n\r\n            const ratedAnimeData = await fetch(`https://kitsu.io/api/edge/anime?fields%5Banime%5D=slug%2CcanonicalTitle%2Ctitles%2CposterImage%2Csynopsis%2CaverageRating%2CstartDate%2CpopularityRank%2CratingRank%2CyoutubeVideoId&filter%5Bcategories%5D=${match.params.catogory}&page%5Blimit%5D=20&page%5Boffset%5D=0&sort=-averageRating`);\r\n\r\n            const ratedAnime = await ratedAnimeData.json();\r\n            setratedCatogoryAnime(ratedAnime.data);\r\n\r\n            setLoading(false);\r\n        }\r\n    fetchCatogoryAnime();\r\n   \r\n\r\n}, [match.params.catogory]);\r\n\r\n    return (\r\n        <div className=\"catogorys-container\">\r\n            {\r\n                loading ? <Stretch/> :\r\n                <div>\r\n                <h1>Explore {match.params.catogory}</h1>\r\n                <AnimeList titleList={`Most Popular ${match.params.catogory} Anime`} animeData={popularCatogoryAnime}/>\r\n                <AnimeList titleList={`Highest Rated ${match.params.catogory} Anime`} animeData={ratedCatogoryAnime}/>\r\n                </div>\r\n            }\r\n         \r\n          \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Nav from './components/nav/nav.jsx';\nimport HomePage from './components/pages/homePage/homePage.jsx';\nimport Anime from './components/anime/anime.jsx';\nimport ErrorPage from './components/pages/error-page/error-page.jsx';\nimport CatogoriesPage from './components/pages/catogories-page/catogories-page.jsx';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\n\n\nfunction App() {\n  return (\n\n    <BrowserRouter>\n        <div className=\"App\">\n          <Nav/>\n          <Switch>\n          <Route path='/' exact component={HomePage}/>\n          <Route path=\"/anime/:animeId\" component={Anime}/>\n          <Route exact path=\"/catogories/:catogory\" component={CatogoriesPage}/>\n          <Route path=\"/\" render={()=><ErrorPage/>} />\n          </Switch>\n        </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}